+ NOTES: An Awesome System

PEOPLE LOVE:
	Different view levels
	Let people edit notes, but the validation falls off - using CHOWN attribute
	Timestamp: creation, edit, lock

FORMAT:
	+note[/list/of/switches] <note>[=<other>]

KEY: 
	<note> - <object>/<note>

COMMANDS:

All switches are mutually exclusive unless noted otherwise.  Ignore all mutually exclusive switches except the first, in those cases.

@@ basics (approval falls off using any of these): 
	/new
		Special rules using the +bg alias
			+bg/new [<player>=]<text> - Auto-increment, prepend: BG #
	/add
		appends to a note
	/edit <note>=<old>/<new>
	/replace
		Uses /add, except note must exist
	/delete

@@ moving (approval falls off using any of these): 
	/move <note>=<target>|<new name>|<target>/<new name>
	/clone <note>=<target>|<new name>|<target>/<new name>

@@ locks (stacks with basics and moving, except /delete):
	/[un]apporove
	/[un]lock
		Also /[un]approves.

@@ viewing:
	/view <item>|<note>|<item/note>
		Special rules using the +view alias (not '/view'):
			+view: view here
			+view <item>: view item (processed first)
			+view <note>: view here/note
	/show <targets>=<note>
	/show <note> [??]

@@ permissions (approval falls off using any of these unless staff):
	/permissions <note>[=<permission level>]
		view, public
		note, private
		judgenote, staff
		(other use Access System Fob)

		Aliases chould assume permissions level.  e.g.:
			+view/new - public
			+bg/new - private
			+note/new - private
			+judgenote/new - staff


--

A DECENT TEST: 

think 
	[setr(r, sql(u(note/sql.one-dbref.title-lookup, %#, tes), ~, |))] ==> 
	t:[setr(t, first(%qr, |))] -- 
	e:[setr(e, elements(%qr, 2, |))] -- 
	s:[setr(s, elements(%qr, 3, |))] ==> 
	[sql(u(notes/sql.primary_key.note_text, %qt, %qe, %qs))]

--

Get a list of all orphaned UUIDs:

think 
	[setq(r, sql(SELECT DISTINCT concat('#', target) AS target FROM mush_notes;))][iter(%qr, %i0[setq(s, sql(u(notes/sql.one_dbref.unused_uuid, %i0)))] [if(t(%qs), Orphaned: %qs, : Valid)], , %b==>%b)]


================================================================================
== COMMANDS SETUP ==============================================================

Mistress system again.

n: name of the command for finding right attr, afterward can be clobbered

--

&c.notes Notes System=$note*:@pemit %#=
	[setq(n, notes)]
	[switch(%0, 
@@ Without 's' ending
		, u(c.%qn.default), 
		/*, u(c.%qn.switch, first(%0), rest(%0)), 
		%b*, u(c.%qn.specific, trim(%0)), 

@@ With 's' ending
		s, u(c.%qn.default), 
		s/*, u(c.%qn.switch, /[first(after(%0, /))], rest(%0)), 
		s%b*, u(c.%qn.specific, trim(rest(%0))), 

@@ No match
		Error: I don't know what you mean. Please see [ansi(h, +help %qn)]
	)]


--------------------------------------------------------------------------------
-- notes/<switch> -------------------------------------------------------------

Handles all /switches, which is to say it makes sure they exist and passes them on.

Also handles pseudo-switches, passing them on as elements to any switched item.

Passes to &c.<name>.specific (%1, %qp) or &c.<name>/<switch> (%1, %qp), even if %1 is empty.

--

0: /<switch>[/<switch>/<switch>, etc.]
1: [<more>], stuff to pass to c.<name>/<switch>, if any

n: Name of the command, global register set in &c.<name> (set above)
   'qn' may be clobbered after this command

a: all c.<name>/* on this object
s: /valid/command/switches/found
p: /pseudo/switches/found, pass to c.<name>[/<switch>]

--

&c.notes.switch Notes System=
	[setq(s, )][setq(p, )][setq(a, lattr(%!/c.%qn/*))]
	[iter(rest(%0, /), 
		if(
			t(grab(%qa, c.%qn/%i0*)), 
			setq(s, %qs/[rest(grab(%qa, c.%qn/%i0*), /)]), 
			setq(p, %qp/%i0)
		), 
		/, @@
	)]
	[if(t(%qs), 
		ulocal(c.%qn/[extract(%qs, 2, 1, /)], %1, %qp), 
		if(t(%1), 
			ulocal(c.%qn.specific, %1, %qp), 
			ulocal(c.%qn.default, %1, %qp)
		)
	)]


--------------------------------------------------------------------------------
-- notes (default) ------------------------------------------------------------

Nothing for now.

--

0: ignored
1: fake /switches

l: location of %#

--

&c.notes.default Notes System=>>> notes default -- 0: %0 -- 1: %1


--------------------------------------------------------------------------------
-- notes <stuff> (specific) ---------------------------------------------------

Show information about a particular note

(will work if room is halt - that's from the Places code)

--

0: note name or number
1: fake /switches

ql: location of %#
qn: number of location, if name or #<num> passed

--

&c.notes.specific Notes System=>>> notes specific -- 0: %0 -- 1: %1


================================================================================
== /view =======================================================================

	+notes/view [<object>[/<note>]]
	+notes/view [<object>]
	+notes/view [<note>]

The '+notes' default should detect default <object> and replace with '%!'.
The '+view' alias should detect default <object> and replace with 'here'.

Priority: Search for <object> first, then <note>
	(You can always +notes/view me/note)

--

0: input
1: pseudo-switches, if any

o: object
d: object dbref
n: note, if any

e: error, if any

--

&c.notes/view Notes System=
	strcat( 
@@ >> Determine %qo And %qn
		case( 1, 
@@ .. if input '*/*' then <object>/<note>
			strmatch( %0, */* ), 
			strcat( setq( o, first( %0, / )), setq( n, rest(%0, / ))), 
@@ .. else if input is object, then input is <object> & null <note>
			or( t( setr( o, locate( %#, %0, *P ))), strmatch( %qo, #-2 )), 
			setq( n, @@( null )), 
@@ .. else <object> is '%#', input is <note>
			strcat( setq( o, %# ), setq( n, %0 ))
		), 

@@ >> Make Sure 'd' Is Set
		setq( d, num( %qo )), 

@@ >> Error Checks
		setq(e, 
			case( 0, 
@@ .. object has too many matches
				comp( %qo, #-2 ), 
				[u( _notice, Object has too many matches )], 
@@ .. object is dbref
				t( %qd ), 
				[u( _notice, Object not found )], 
@@ .. 
				@@( more errors to follow )
			)
		), 

@@ >> Error, List or Detail
		case(1, 
			t( %qe ), %qe, 
			t( %qn ), u( f.notes/view.detail, %qd, %qn ), 
			u( f.notes/view.list, %qd )
		)
	)


--------------------------------------------------------------------------------
-- /view: list -----------------------------------------------------------------

0: object

l: list of notes/note details (col|col|col:...)

--

&f.notes/view.list Notes System=
	u( display.list-notes, 
		sql(u(sql.one-dbref, %0), :, | ),  
		Notes on [name(%0)], 
		No notes on [name(%0)] 
	)


--------------------------------------------------------------------------------
-- /view: detail ---------------------------------------------------------------

0: object
1: note name

l: list of matching notes in the sql.one-dbref.title-lookup / sql.one-dbref fmt

--

&f.notes/view.detail Notes System=
		case( 0, 

@@ >> No notes (also populates %ql)
			words( 
				setr( l, sql(u(sql.one-dbref.title-lookup, %0, %1 ), :, |)), 
				: 
			), 
			u( _notice, No match ), 

@@ >> Too many matches (display matches)
			eq( words( %ql, : ), 1 ), 
			u( _notice, 
				I don't know which you mean: 
				[itemize( 
					iter( %ql, elements(%i0, 4, |), :, : ), 
					:, or 
				)]
			), 

@@ >> Good, display note
			u( display.one-note, elements( %ql, 1 2 3, |, | ))
		)


================================================================================
== /show =======================================================================

	+notes/show <targets>=<note>
	+notes/show <note> (???)

0: input
1: psuedo-switches, if any

t: targets dbrefs ('all' -> room contents)

--

&c.notes/show Notes System=
	>>> /show -- 0: %0 -- 1: %1


--------------------------------------------------------------------------------
-- /show: list -----------------------------------------------------------------

0: object

--

&f.notes/view.list Notes System=
	u(f.notes/view.list)


--------------------------------------------------------------------------------
-- /show: detail ---------------------------------------------------------------

0: object
1: note name

--

&f.notes/show.detail Notes System=
	u(f.notes/view.detail)


================================================================================
== SQL =========================================================================

Create a full history system, a la Wikipedia.

Format:
	sql.<filter style>
	sql.<filter style>.<search for>

e.g.:
	sql.one-dbref : Pull all information from that dbref
	sql.one-dbref.title-lookup : Search title for a particilar dbref (player)

--

SQL DD:
	target'd debref (not null, to validate vs game dbref + _location_ID)
	editor's dbref (primary key)
	timestamp (primary key)
	target's creation timestamp (not null)
		- convtime(get(me/created), , 6)
		- target dbref + creation date = UUID
	the complete new note, even if only edited (not null)
	permissions (default: private)
	approval dbref

--

Table SQL:

DROP TABLE IF EXISTS mush_notes; 
CREATE TABLE IF NOT EXISTS mush_notes
(
    target           INT             NOT NULL, 
    editor           INT             NOT NULL, 
    time             TIMESTAMP       NOT NULL, 
    target_created   TIMESTAMP       NOT NULL, 
    title            VARCHAR(255)    NOT NULL, 
    note             TEXT            NOT NULL, 
    permission       VARCHAR(255)    NOT NULL DEFAULT 'private', 
    approved_by      INT, 
    locked_by        INT, 

    PRIMARY KEY (target, editor, time), 
    INDEX target_UUID (target, target_created)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


--------------------------------------------------------------------------------
-- SQL: Transaction Start/Commit -----------------------------------------------

&f.transaction.start Notes System=
	strcat(
		sql( START TRANSACTION ), 
		sql( SET autocommit = 0 )
	)

--

&f.tranaction.commit Notes System=
	strcat(
		sql( COMMIT ), 
		sql( SET autocommit = 1 )
	)


--------------------------------------------------------------------------------
-- SQL: Insert Note ------------------------------------------------------------

Basic insert + optional approve + optional loc

0: editor dbref, 1: target dbref, 2: title, 3: note, 4: permission, 
5: approve?, 6: lock?

--

&sql.insert Notes System=
	INSERT INTO mush_notes 
	VALUES (
		[rest(%1, #)], 
		[rest(%0, #)], 
		NOW(), 
		FROM_UNIXTIME('[convtime(get(%1/created), , 6)]'), 
		'%2', 
		'%3', 
		'[if(t(%4), %4, private)]', 
		[if(t(%5), rest(%0, #), NULL)], 
		[if(t(%6), rest(%0, #), NULL)]
	);


--------------------------------------------------------------------------------
-- SQL: List Notes for One Dbref -----------------------------------------------

List of note titles from a specific person

0: target dbref
output: target (dbref), editor (dbref), time (secs), 
        target_created (secs), title (text), 
        permission (text), approved_by (dbref), locked_by (dbref)

(not the note text itself)

--

&sql.one-dbref Notes System=
	SELECT 
		concat('#', target) AS target, 
		concat('#', editor) AS editor, 
		UNIX_TIMESTAMP(time) AS time, 
		title, 
		permission, 
		IF(IFNULL(approved_by, NULL), concat('#', approved_by), '') 
			AS approved_by, 
		IF(IFNULL(locked_by, NULL), concat('#', locked_by), '') AS locked_by 
	FROM mush_notes 
	WHERE 
		target = [rest(%0, #)] AND 
		target_created = 
			FROM_UNIXTIME('[convtime(get(%0/created), , 6)]');


--------------------------------------------------------------------------------
-- SQL: List Notes for One Dbref (Filter Title) --------------------------------

List of a specific person's notes, found by title match

0: target dbref
1: title partial name
output: target (dbref), editor (dbref), time (secs), 
        target_created (secs), title (text), 
        permission (text), approved_by (dbref), locked_by (dbref)

(not the note text itself)

--

&sql.one-dbref.title-lookup Notes System=
	SELECT 
		concat('#', target) AS target, 
		concat('#', editor) AS editor, 
		UNIX_TIMESTAMP(time) AS time, 
		title, 
		permission, 
		IF(IFNULL(approved_by, NULL), concat('#', approved_by), '') AS approved_by, 
		IF(IFNULL(locked_by, NULL), concat('#', locked_by), '') AS locked_by 
	FROM mush_notes 
	WHERE 
		target = [rest(%0, #)] AND 
		target_created = 
			FROM_UNIXTIME('[convtime(get(%0/created), , 6)]') AND 
		title LIKE '%1\\\%'
	ORDER BY title ASC;


--------------------------------------------------------------------------------
-- SQL: Get Notes Text using Primary Key ---------------------------------------

Get the text of a specific note

0: target dbref, 1: editor dbref, 2: timestamp (aka primary key)
output: note text

--

&sql.primary_key.note_text Notes System=
	SELECT note 
	FROM mush_notes 
	WHERE 
		target = [rest(%0, #)] AND 
		editor = [rest(%1, #)] AND 
		time = FROM_UNIXTIME('%2'); 


--------------------------------------------------------------------------------
-- SQL: Get Everything using Primary Key ---------------------------------------

Get the text of a specific note

0: target dbref, 1: editor dbref, 2: timestamp (aka primary key)
output: target (dbref), editor (dbref), time (secs), 
        target_created (secs), title (text), note (text), 
        permission (text), approved_by (dbref), locked_by (dbref)

--

&sql.primary_key.everything Notes System=
	SELECT 
		concat('#', target) AS target, 
		concat('#', editor) AS editor, 
		UNIX_TIMESTAMP(time) AS time, 
		title, 
		note, 
		permission, 
		IF(IFNULL(approved_by, NULL), concat('#', approved_by), '') AS approved_by, 
		IF(IFNULL(locked_by, NULL), concat('#', locked_by), '') AS locked_by 
	FROM mush_notes 
	WHERE 
		target = [rest(%0, #)] AND 
		editor = [rest(%1, #)] AND 
		time = FROM_UNIXTIME('%2'); 

--

think sql(u(notes/sql.primary_key.everything, #1003, #1003, 1326420169), ~, |)


--------------------------------------------------------------------------------
-- SQL: Unused UUID ------------------------------------------------------------

List abandoned 'dbref + creation date' UUIDs based on a single dbref.

0: player dbref

--

&sql.one_dbref.unused_uuid Notes System=
	SELECT DISTINCT 
		concat('#', target) AS target, 
		UNIX_TIMESTAMP(target_created) AS target_created 
	FROM mush_notes 
	WHERE 
		target = [rest(%0, #)] AND 
		target_created != 
			FROM_UNIXTIME('[convtime(get(%0/created), , 6)]');


================================================================================
== DISPLAYS ====================================================================

Various outputs.

(for CODP)
&prefix.displays Notes System=display.

--------------------------------------------------------------------------------
-- DISPLAY: List Of Notes ------------------------------------------------------

0: list of notes/note details in the 'sql.one-dbref' format.
1: Header text
2: Fail text (if any)

--

&display.list-notes Notes System=

	if( t( %0 ), 

@@ >> Display items
		strcat(
			list( 1, u( _header, %1 )), 
			list( 
				%0, 
				elements( %i0, 4, | ), 
				:
			), 
			list( 1, u( _footer, words( %0, : )))
		), 

@@ >> Nothing to display (default msg)
		u( _notice, if(t(%2), %2, Nothing to display ))
	)


--------------------------------------------------------------------------------
-- DISPLAY: One Note -----------------------------------------------------------

	think u(notes/display.one-note, #1003|#1003|1326417155)

0: primary key (#target|#editor|time-in-secs)
   (we do it like this so we can extract primary key from, say, keyword search)
   (a cheap 'join')

The | delimiter is for legibility only.

--

&display.one-note Notes System=
	[setq(q, 
		sql(
			u(sql.primary_key.everything, 
				elements(%0, 1, |), 
				elements(%0, 2, |), 
				elements(%0, 3, |)
			), 
			~, 
			|
		)
	)]

	[case(0, 
		eq(words(%qq, ~), 1), 
		u(_notice, Primary key passed to 'display one note' was not unique.), 

@@ Display!
		[u(_header, [elements(%qq, 4, |)] (on [name(elements(%qq, 1, |))]))]%r
		
		NAME: [elements(%qq, 4, |)]%r
		EDITED BY: [name(elements(%qq, 2, |))]%r
		LAST EDIT: [convsecs(elements(%qq, 3, |))]%r
		NOTE PERMISSIONS: [elements(%qq, 6, |)]%r
		APPROVED BY: [elements(%qq, 7, |)]%r
		LOCKED BY: [elements(%qq, 8, |)]%r
		TEXT: [elements(%qq, 5, |)]%r
		
		[u(_footer, elements(%qq, 6, |))]
		
	)]


================================================================================
== CROSS-PLATFORM CODE =========================================================

Code which will probably be different from game to game.

(for CODP)
&prefix.cross_platform Notes System=_

--

&_header Notes System=wheader(%0)
&_footer Notes System=wfooter(%0)
&_divider Notes System=wdivider(%0)

&_notice Notes System=[ansi(xh, GAME:)] %0
