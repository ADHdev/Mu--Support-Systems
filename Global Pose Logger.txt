################################################################################
## THE DATABASE ################################################################

DROP TABLE IF EXISTS mush_poselogger; 
CREATE TABLE IF NOT EXISTS mush_poselogger
(
    time             NUMERIC(18,6)   NOT NULL, 
    location         INT             NOT NULL, 
    triggered_by     INT             NOT NULL, 
    quote            TEXT, 

    PRIMARY KEY (time, location)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


################################################################################
## THE POSE LOGGER #############################################################


================================================================================
== CREATE & LINK ===============================================================

@create Pose Logger=10
@set Pose Logger=INHERIT SAFE

@force me=&d.me Pose Logger=[num(Pose Logger)]


--------------------------------------------------------------------------------
-- Additional Usage of the CODP formatter --------------------------------------

@parent Pose Logger=CODP
&prefix.sql Pose Logger=sql.
&prefix.display Pose Logger=display.


================================================================================
== SQL Statements ==============================================================


--------------------------------------------------------------------------------
-- SQL: Transaction Start/Commit -----------------------------------------------

&f.transaction.start Pose Logger=
	strcat(
		sql( START TRANSACTION ), 
		sql( SET autocommit = 0 )
	)

--

&f.tranaction.commit Pose Logger=
	strcat(
		sql( COMMIT ), 
		sql( SET autocommit = 1 )
	)


--------------------------------------------------------------------------------
-- SQL: Insert -----------------------------------------------------------------

0: dbref of poser
1: location logged from
2: text

--

&sql.insert Pose Logger=
	strcat(
		INSERT INTO mush_poselogger VALUES%(, 
			rpad(round(secs(local, 6), 6), 19, 0), %, , 
			ulocal(f.sqlescape, rest(%1, #)), %, , 
			ulocal(f.sqlescape, rest(%0, #)), %, 
			', ulocal( f.sqlescape, %2 ), '
		%)
	)


--------------------------------------------------------------------------------
-- SQL: List Primary Keys by Location ------------------------------------------

0: dbref of location (here = loc(%#))

returns: secs(, 6), location dbref without #

--

&sql.primary-keys.location Pose Logger=
	strcat(
		SELECT time%, 
		location 
		FROM mush_poselogger 
		WHERE location=, 
			rest(if(isdbref(%0), %0), #), %b
		ORDER BY time DESC, 
		if(isint(%1), cat(%bLIMIT, %1))
	)


--------------------------------------------------------------------------------
-- SQL: Triggered By & Quote by Primary Key ------------------------------------

We're looking up by primary key, but just in case something goes pear-shaped, limit to 1 record.

&sql.quote.primary-key Pose Logger=
	strcat(
		SELECT triggered_by%, quote 
		FROM mush_poselogger 
		WHERE 
			time =%b, 
				if(strmatch(%0, *.??????), %0),
			%b
			AND location =%b, 
				if(isdbref(#%1), %1), 
			%b
			LIMIT 1
	)


--------------------------------------------------------------------------------
-- SQL: List Last 'x' Lines from a specific location ---------------------------

0: dbref of location (here = loc(%#))
1: 'last' value

--

&sql.last-lines.location Pose Logger=
	strcat(
		SELECT 
			time%,  
			concat%('#'%, location%) AS location%, 
			concat%('#'%, triggered_by%) AS triggered_by%, 
			quote 
		FROM mush_poselogger 
		WHERE location=, 
			rest(if(isdbref(%0), %0), #), %b
		ORDER BY time DESC 
		LIMIT%b, 
			if(isint(%1), %1, 0)
	)


--------------------------------------------------------------------------------
-- SQL: Count Lines from a specific location -----------------------------------

0: dbref of location (here = loc(%#))

--

&sql.count-lines.location Pose Logger=
	strcat(
		SELECT 
			count%(*%) AS lines
		FROM mush_poselogger 
		WHERE location=, 
			rest(loc(if(isdbref(%0), %0)), #), %b
	)


================================================================================
== Cross-Platform Functions ====================================================

&_header Pose Logger=wheader(%0)
&_footer Pose Logger=wfooter(%0)
&_divider Pose Logger=wdivider(%0)

&_notice Pose Logger=[ansi(xh, GAME:)] %0

&_lbuf Pose Logger=config(lbuf_size)


================================================================================
== Functions ===================================================================


--------------------------------------------------------------------------------
-- Func: Escape SQL ------------------------------------------------------------

&f.sqlescape Pose Logger=edit( edit( edit( edit( %0, \\, \\\\ ), ', \\' ), ", \\" ), \%, \\\\\% )


--------------------------------------------------------------------------------
-- Func: Log Passed Text -------------------------------------------------------

0: room
1: triggered by
2: text

--

&f.log-what-I-hear Pose Logger=
	case(0, 
		isdbref(%0), #-1 LOCATION INVALID, 
		isdbref(%1), #-1 TRIGGERER INVALID, 
@@		strmatch(loc(%1), %0), #-1 LOCATION MISMATCH, 

		sql(escape(ulocal(sql.insert, %1, %0, %2)))
	)

--------------------------------------------------------------------------------
-- Func: List Listeners --------------------------------------------------------

&f.list.listeners Pose Logger=
	iter(
		children(%!), 
		strcat(
			%i0|, 
			loc(%i0)
		)
	)


================================================================================
== Triggers ====================================================================


--------------------------------------------------------------------------------
-- Trigger: New Pose-Logger at Target Location ---------------------------------

0: target location
q0: dbref of target location

&tr.spawn-listener Pose Logger=
	@if not(strlen(%0))=@eval setq(0, loc(%#)), setq(0, %0); 

	@if t(iter(lcon(%q0), if(strmatch(parent(%i0), %!), %i0)))=
	{
		@pemit %#=[u(_notice, There is already a listener at that location.)]
	}, 
	{
		@eval setq(d, create(Elder God, 100)); 
		@set %qd=DARK INHERIT MONITOR; 
		@lock %qd=#1; 
		@desc %qd=This location's pose-listener.; 
		@parent %qd=%!; 
		@link %qd=%q0; 
		@listen %qd=*; 
		@amove %qd=@@(Something does need to go here);
		@ahear %qd=
			@eval 
				ulocal(f.log-what-I-hear, 
					loc(%%!), 
					%%#, 
@@					strtrunc(translate(%%0, p), mul(u(_lbuf), .95))
					strtrunc(%%0, mul(u(_lbuf), .95))
				); 

		@eval 
			ulocal(f.log-what-I-hear, 
				%q0, 
				v(d.me), 
				*** NOW LISTENING AT: [name(%q0)] (%q0)
			); 

		@tel/quiet %qd=HOME
	}


--------------------------------------------------------------------------------
-- Trigger: Destroy Pose-Logger from Target Location ---------------------------

0: target location

&tr.destroy-listener Pose Logger=
	@if t(iter(lcon(%0), if(strmatch(parent(%i0), %!), %i0)))=
	{
		@eval setq(d, iter(lcon(%0), if(strmatch(parent(%i0), %!), %i0))); 

		@dolist %qd={
			@set ##=HALT; 

			@eval 
				ulocal(f.log-what-I-hear, 
					loc(##), 
					v(d.me), 
					*** NO LONGER LISTENING AT: [name(%0)] (%0)
				); 

			@tel/quiet ##=%!; 
			@destroy/override/instant ##
		}
	}, 
	{
		@pemit %#=[u(_notice, There are no listeners at that location.)]
	}
	

================================================================================
== Displays ====================================================================


--------------------------------------------------------------------------------
-- Display: Last 'x' Poses -----------------------------------------------------

0: list of <primary>|<key> <primary>|<key> to display

--

&display.last-poses Pose Logger=
	list(
		%0, 
		strcat(
			setq(e, 
				sql(u(sql.quote.primary-key, first(%i0, |), rest(%i0, |)), , |)
			), 
			
			ansi(xh, %[), 

			ansi(xh, convsecs(first(%i0, |))), 

			ansi(xh, %] %[), 

			ansi(xh, name(first(#%qe, |))), 

			ansi(xh, %]:%b), 
			
			rest(%qe, |)
		)
	)



################################################################################
## THE FRONT-END ###############################################################

+poselog last[ <amt>[=<location>]]


================================================================================
== Setup =======================================================================

@create Poselog Front-End=10
@set Poselog Front-End=INHERIT SAFE

@parent Poselog Front-End=codp
&prefix.cross-platform Poselog Front-End=_

--

@fo me=&d.sql Poselog Front-End=[num(Pose Logger)]
@tel Pose Logger=Poselog Front-End


================================================================================
== Cross-Platform Functions ====================================================


&_header Poselog Front-End=wheader(%0)
&_footer Poselog Front-End=wfooter(%0)
&_divider Poselog Front-End=wdivider(%0)

&_notice Poselog Front-End=[ansi(xh, GAME:)] %0

&_lbuf Poselog Front-End=config(lbuf_size)


================================================================================
== Functions ===================================================================


--------------------------------------------------------------------------------
-- Function: Listening at Location? --------------------------------------------

&f.listening.at-loc Poselog Front-End=
	lor(iter(lcon(%0), strmatch(parent(%i0), v(d.sql))))


================================================================================
== Commands ====================================================================


--------------------------------------------------------------------------------
-- Command: Poselast, No Args --------------------------------------------------

l: location being requested
q: query

--

&c.poselast.noargs Poselog Front-End=
$+poselast:
	@eval 
		setq(q, 
			sql( 
				u([v(d.sql)]/sql.primary-keys.location, setr(l, loc(%#)), 10), 
				, |
			)
		); 
	
	@if strlen(%qq)=
	{
		@pemit %#=
			strcat(
				list(1, u(_header, Last 10 for [name(%ql)] (%ql))), 
				u([v(d.sql)]/display.last-poses, revwords(%qq)), 
				list(1, 
					u(_footer, 
						if(u(f.listening.at-loc, %ql), Active at This Location)
					)
				)
			)
	}, 
	{
		@pemit %#=[u(_notice, This location has not been logged.)]
	}


--------------------------------------------------------------------------------
-- Command: Poselast Number/Location -------------------------------------------

&c.poselast Poselog Front-End=
$+poselast *:
	@eval 
		[setq(n, first(%0, =))]
		[setq(l, rest(%0, =))];

	@pemit %#=
		case(0, 
			or(not(%ql), isstaff(%#)), 
			[u(_notice, Staff only.)], 

			or(not(%ql), isdbref(%ql)), 
			[u(_notice, This location has not been logged.)], 

			and(isint(%qn), gt(%qn, 0)), 
			[u(_notice, Please use a postive number of poses to look at.)], 

			lt(%qn, 10000), 
			[u(_notice, Don't be silly.)], 
			
			strcat(
				setq(l, if(strlen(%ql), %ql, loc(%#))), 

				setq(q, 
					sql( 
						u([v(d.sql)]/sql.primary-keys.location, %ql, %qn), 
						, |
					)
				), 

				list(1, u(_header, Last %qn for [name(%ql)] (%ql))), 
				u([v(d.sql)]/display.last-poses, revwords(%qq)), 
				list(1, 
					u(_footer, 
						if(u(f.listening.at-loc, %ql), Active at This Location)
					)
				)
			)
		)
