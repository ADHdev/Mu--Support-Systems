/*
REQUEST SYSTEM: The easier way to add and sort jobs.

	req <title>=<contents>
	req/<type> <title>=<contents>

Request from staff. Different types have different outcomes, which can be 
fairly easily modified with the "request types" section, at the end.

It is also simple to create a specialty command, such as:

	$+request *:@trigger %!/trig.command.request=/request %0, %#
	$+beat *:@trigger %!/trig.command.request=/beat [moniker( %# )]=%0, %#

... and so forth.

I've also put a single return (%r) before the contents, because it's always 
driven me batty that the content starts right after a spammy timestamp. e.g.: 

	[1+] Thenomain added on Wed Feb 11 19:20:37 2015: 
	content

vs.

	[1+] Thenomain added on Wed Feb 11 19:20:37 2015: content

*/



// =============================================================================
// == SETUP ====================================================================

@create Jobs Request System <jrs>=10
@set Jobs Request System <jrs>=inherit safe
@fo me=&d.jrs me=search( name=Jobs Request System <jrs> )
@desc Jobs Request System <jrs>=
	I know the following request types: %r
	[titlestr( 
		iter( 
			lattr( %!/d.*.bucket ), 
			edit( elements( %i0, 2, . ), _, %b ), 
			, %,%b 
		)
	)]


// links to the Anomaly Jobs setup 

@fo me=&d.jgo me=[search( name=Job Global Object <JGO> )]
@fo me=@va [v( d.jrs )]=[get( v( d.jgo )/va )]
@fo me=@vb [v( d.jrs )]=[get( v( d.jgo )/vb )]
@fo me=@vc [v( d.jrs )]=[get( v( d.jgo )/vc )]

@if not( isdbref( v( d.jgo )))=think ansi( 
		rh, 
		HEY! HEY!, 
		n, 
		%bI didn't find the `Jobs Global Object <JGO>`. 
		The jobs request system isn't going to work. 
	)


// Create an '+allstaff' generic group when one isn't set or valid

@if not( search( eobject=cand( strmatch( name( ## ), +allstaff ), strmatch( loc( ## ), get( jrs/vb )))))=
	{
	    +jgroup/create +allstaff=All staff belong to this group.
	}; 

@wait 3=&ismember [search( eobject=cand( strmatch( name( ## ), +allstaff ), strmatch( loc( ## ), get( jrs/vb ))))]=isstaff%( %%0 %); 


// Link to the Code Object Data Parent

@fo me=@parent [v( d.jrs )]=[search( name=Code Object Data Parent <codp> )]



// =============================================================================
// == COMMANDS =================================================================

// req[uest]/<switch>, if no <switch> then default switch is 'request':

&c.request [v( d.jrs )]=
	$^\+?req(uest)?(.*)$:@trig %!/trig.command.request=objeval( %#, s( %2 )), %#

@set v( d.jrs )/c.request=regex
@set v( d.jrs )/c.request=no_parse


// =============================================================================
// == TRIGGERS =================================================================


// -----------------------------------------------------------------------------
// -- Run the Command ----------------------------------------------------------
// 0: input
// 1: enactor (%#)

// s: switch
// t: title
// c: contents
// m: matches

&trig.command.request [v( d.jrs )]=
	@break u( %va/FN_GUEST, %1 )={ 
		@pemit %1=u( .msg, %qr, This command is not available to guests. ) 
	}; 

	think strcat( 
		s:%b, setr( s, trim( rest( before( %0 ), / ))), %r, 

		0:%b, setr( 0, trim( if( strlen( %qs ), rest( %0 ), %0 ))), %r, 
		t:%b, setr( t, first( %q0, = )), %r, 
		c:%b, setr( c, rest( %q0, = )), %r, 

		s:%b, setr( s, if( strlen( %qs ), %qs, request )), %r, 
		m:%b, setr( m, lattr( %!/d.%qs*.bucket )), %r, 
		m:%b, setr( m, if( words( %qm ), %qm, lattr( %!/d.*.bucket ))), %r, 
	); 

	@assert hasattr( %!, d.%qs.bucket )={ 
		@pemit %1=u( .msg, req/%qs, 
			strcat( 
				Request type not found., %b, 
				It could have been:, %b, 
				lcstr( itemize( edit( %qm, D., , .BUCKET, ), , or ))
			)
		) 
	}; 

	@assert u( f.validate.access, %qs, %1 )={ 
		@pemit %1=u( .msg, req/%qs, This request type is staff-only. ) 
	}; 

	@assert strlen( %qt )={ 
		@pemit %1=u( .msg, req/%qs, Your request needs a title. ) 
	}; 

	@assert strlen( %qc )={ 
		@pemit %1=u( .msg, req/%qs, Your request needs some content. ) 
	}; 

	@trig %!/trig.create.request=%qs, %1, %qt, %qc; 


// -----------------------------------------------------------------------------
// -- Create the request -------------------------------------------------------

// 0: switch (validated)
// 1: enactor (%#)
// 2: title
// 3: contents

// a: bucket name
// b: bucket dbref
// i: +jgroup name
// j: +jgroup dbref

&trig.create.request [v( d.jrs )]=
	think strcat( 
		a:%b, setr( a, ucstr( u( f.get.bucket, %0 ))), %r, 
		b:%b, setr( b, u( %va/FN_FIND-BUCKET, %qa )), %r, 

		i:%b, setr( i, lcstr( u( f.get.jgroup, %0 ))), %r, 
		j:%b, setr( j, u( %va/FN_FIND-JGROUP, %qi )), %r, 

	); 

	@assert t( %qb )={ 
		@pemit %1=u( .msg, req/%0, I can't find the '%qa' bucket for this. )
	}; 

	@assert t( %qj )={ 
		@pemit %1=u( .msg, req/%0, I can't find the '%qi' jgroup for this. )
	}; 

	@pemit %1=u( .msg, req/%0, u( f.get.msg, %0, %2, %3 )); 

	@trigger %!/trig.create.job=
		%1, 
		%qb, 
		u( f.get.level, %0 ), 
		[if( 
			strlen( u( f.get.prefix, %0, %1 )), 
			[u( f.get.prefix, %0, %1 )]:%b 
		)]
		[u( %va/FN_STRTRUNC, trim( %2 ), 30 )], 
		u( %va/FN_STRTRUNC, trim( %3 ), get( %va/BUFFER )), 
		%qj; 


// -----------------------------------------------------------------------------
// -- Create the job itself ----------------------------------------------------
// As a hook for other systems

// 0: enactor (%#)
// 1: bucket dbref (%qb)
// 2: alert level (1, 2, or 3)
// 3: job title
// 4: job contents
// 5: +jgroup dbref (%qj)

&trig.create.job [v( d.jrs )]=
	@trigger %va/TRIG_CREATE=
		%0, 
		%1, 
		%2, 
		%3, 
		%r%4, 
		, 
		%5, 
		2



// =============================================================================
// == FUNCTIONS ================================================================

&.msg [v( d.jrs )]=ansi( h, <%0>, n, %b%1 )


// -----------------------------------------------------------------------------
// -- Function: Validations ----------------------------------------------------
// (used in most, but not all, cases)

&f.validate.access [v( d.jrs )]=
	cor( 
		isstaff( %1 ), 
		not( udefault( f.%0.staff-only, 0 ))
	)


// -----------------------------------------------------------------------------
// -- Functions: Get information for job creation ------------------------------
// 0: switch
// 1: input (if any; msg gets the title, isstaff is enactor)
// returns: what is needed for trig.request.create


&f.get.bucket [v( d.jrs )]=udefault( d.%0.bucket, REQ )
&f.get.jgroup [v( d.jrs )]=udefault( d.%0.assign, +allstaff )
&f.get.prefix [v( d.jrs )]=udefault( d.%0.prefix, @@( none ), %1 )
&f.get.level [v( d.jrs )]=udefault( d.%0.level, 1 )

&f.get.msg [v( d.jrs )]=udefault( 
		d.%0.msg, 
		You have requested 
		'[u( display.msg.job_title, %1 )]' 
		from staff. Please allow for some time to process it., 
		%1, %2 
	)



// =============================================================================
// == DISPLAYS & FORMATTING ====================================================


&display.msg.job_title [v( d.jrs )]=
	ansi( h, secure( u( %va/FN_STRTRUNC, trim( %0 ), 30 )))

&display.generic_msg [v( d.jrs )]=
	You have requested [u( display.msg.job_title, %0 )] 
	as a '%1' request from staff. Please allow for some time to process it. 



// =============================================================================
// == REQUEST TYPES ============================================================

/*

&d.<type>.<info>
	<type>
		Does what you probably think. 
		`+req/foo` will look for information from `d.foo.<info>`.
	<info>
		bucket: <bucket> [required]
		assign: <+jgroup> [required]
		msg: <message> to send to enactor [defaulted if not set]
		prefix: <prefix to message, e.g. 'BUG'> [optional]
		level: <alert level, default to '2', '3' for bugs> [optional]
		staff-only: '1' if staff-only
*/



// =============================================================================
// == REQUEST TYPES (game infrastructure) ======================================

/*
	request (generic)

	bug
	code
	build

	equip
	xp
*/


// -----------------------------------------------------------------------------
// -- Switch: Request ----------------------------------------------------------

&d.request.bucket [v( d.jrs )]=REQ
&d.request.jgroup [v( d.jrs )]=+allstaff


// -----------------------------------------------------------------------------
// -- Switch: Bug --------------------------------------------------------------

&d.bug.bucket [v( d.jrs )]=CODE
&d.bug.jgroup [v( d.jrs )]=+code
&d.bug.prefix [v( d.jrs )]=BUG
&d.bug.level [v( d.jrs )]=3

&d.bug.msg [v( d.jrs )]=
	You have notified production staff of the 
	[u( display.msg.job_title, %0 )] bug with the details 
	'[secure( u( %va/FN_STRTRUNC, trim( %1 ), get( %va/BUFFER )))]'. 
	Staff will need the EXACT command(s) used to create this bug and, 
	if possible, how the result differs from what you were expecting to happen. 
	If you did not enter this information, please do so now.


// -----------------------------------------------------------------------------
// -- Switch: Code -------------------------------------------------------------

&d.code.bucket [v( d.jrs )]=CODE
&d.code.jgroup [v( d.jrs )]=+code

&d.code.msg [v( d.jrs )]=u( display.generic_msg, %0, code )


// -----------------------------------------------------------------------------
// -- Switch: Build ------------------------------------------------------------

&d.build.bucket [v( d.jrs )]=BUILD
&d.build.jgroup [v( d.jrs )]=+build

&d.build.msg [v( d.jrs )]=u( display.generic_msg, %0, build )



// =============================================================================
// == SWITCHES (roleplay administration) =======================================

/*
	vampire
	demon
	werewolf
	
	city
	society
	law
	
*/
