################################################################################
## AUDIT/PLAYERS ###############################################################

Various information about players and their stuff.


================================================================================
== CREATE: Freezer Management Object ===========================================

@create Audit: Players <a:p>=10

@set a:p=safe inherit

@parent a:p=#2833
&prefix.cross-platform_functions a:p=.
&prefix.reports a:p=report.


================================================================================
== CROSS-PLATFORM FUNCTIONS ====================================================

&.isstaff a:p=isstaff( %0 )
&.pmatch+ a:p=pmatch++( %0 )

&.superheader a:p=edit( u( .header, %0 ), =, #, >, %[, <, %] )
&.superfooter a:p=edit( u( .footer, %0 ), =, #, >, %[, <, %] )
&.header a:p=header( %0 )
&.footer a:p=footer( %0 )
&.divider a:p=divider( %0 )
&.notice a:p=ansi( h, <audit/player> )
&.titlestr a:p=titlestr( %0, %1 )

&.places a:p=places( %0, %1, %2 )


--

@@ Uses TinyMUX columns() - redefine for your platform of choice

&.columns a:p=columns(%0, %1, %2, %3)

--

@@ some people have andlist()

&.itemize a:p=itemize( %0, %1, if( t( %2 ), %2, or ), if( t( %3 ), %3, %, ))



================================================================================
== DATA ========================================================================

&d.ajobs.job-tracker a:p=#2594
&d.ajobs.report-jgroup a:p=+Build
&d.ajobs.report-bucket a:p=BUILD

&d.notes.object a:p=#116

&d.important-flags a:p=WIZARD ROYALTY STAFF IMMORTAL GAGGED GUEST PRPRUNNER NPC  OPEN_OK PARENT_OK ABODE ROBOT SLAVE

&d.important-flags.hidden a:p=SITEMON SUSPECT



================================================================================
== USER FUNCTION: isapproved() =================================================

	isapproved(<dbref>[, <approval type>])

This is the updated isapproved() function. Priv'd Function.

FLAGS:
	approved, frozen, exstaff, permafrozen

APPROVAL TYPES:
	approved: has the approval flag (default)
	frozen: has the frozen or exstaff flag
	exstaff, ex-staff, staff: has the exstaff flag
	permafrozen: has the permafrozen flag
	unapproved, never: none of the above

--

0: <dbref>
1: <approval type>

--

&ufunc.isapproved a:p=
	switch( %1, 
		a*, cor( isstaff( %0 ), hasflag( %0, approved )), 
		f*, hasflag( %0, frozen ), 
		ex*, hasflag( %0, exstaff ), 
		st*, hasflag( %0, exstaff ), 
		p*, hasflag( %0, permafrozen ), 
		un*, not(cor( u( .isstaff, %0 ), orflags( %0, 0167 ))), 
		nev*, not(cor( u( .isstaff, %0 ), orflags( %0, 0167 ))), 
		cor( isstaff( %0 ), hasflag( %0, approved ))
	)



================================================================================
== COMMANDS ====================================================================


--------------------------------------------------------------------------------
-- Null Command ----------------------------------------------------------------

&c.audit-player.null a:p=$+audit/player:@pemit %#=if( u( .isstaff, %# ), [u( .notice )] Command's format is: +audit/player <target>%[=<category>%], [u( .notice )] Staff only. )


--------------------------------------------------------------------------------
-- Core Command ----------------------------------------------------------------

	+audit/player <target>[=<category>]

t: target
c: category; player, rooms, objects, all (default)

--

&c.audit-player a:p=$+audit/player *:@pemit %#=
	strcat( 
		setq( t, u( .pmatch+, before( %0, = ))), 
		setq( c, 
			if( comp( setr( c, rest( %0, = )), ), 
				grab( 
					|[iter( lattr( %!/f.action.* ), last( %i0, . ), , |)], 
					%qc*, 
					| 
				), 
				all
			)
		), 

		case( 0, 
			u( .isstaff, %# ), [u( .notice )] Staff only., 

			t( %qt ), 
			[u( .notice )] Player not found., 

			t( %qc ), 
			[u( .notice )] Audit category not found. Try one of: 
			[lcstr( u( .itemize, 
				sort( iter( lattr( %!/f.action.* ), last( %i0, . )))
			))], 

@@ okay, run action
			u( f.action.%qc, 
				%qt, 
				%#
			)
		)
	)


--------------------------------------------------------------------------------
-- Action: Players -------------------------------------------------------------

All actions are format: 
	u( f.action.<class>, <target>, <viewer> )

--

&f.action.player a:p=u( report.player, %0, %1 )


--------------------------------------------------------------------------------
-- Action: Rooms ---------------------------------------------------------------


&f.action.rooms a:p=u( report.rooms, search( %0 type=room ), %0, %1 )


--------------------------------------------------------------------------------
-- Action: Objects -------------------------------------------------------------


&f.action.objects a:p=u( report.objects, search( %0 type=object ), %0, %1 )


--------------------------------------------------------------------------------
-- Action: All -----------------------------------------------------------------

&f.action.all a:p=
	strcat( 
		u( f.action.player, %0, %1 ), %r, 
		u( f.action.rooms, %0, %1 ), %r, 
		u( f.action.objects, %0, %1 )
	)



================================================================================
== FACTIONS ====================================================================

Interfaces with the Aether Factions System. If you use Amberyl's Org code, look here.

--

&prefix.factions a:p=factions.

&d.factions a:p=#2832


--------------------------------------------------------------------------------
-- FACTIONS: List Factions -----------------------------------------------------

	u( factions.list-factions, <player dbref>, 'staff' or 'player' )

%0: player dbref
%1: 'staff' or 'player' (default)

--

&factions.list-factions a:p=
@@ filter from 'staff' (all) or 'player' (some may not be visible)
filter(
	v( d.factions )/fil.see-faction, 
	setunion( 

@@ .. from player object
		iter( get( %0/_faction-member ), rest( %i0, ! ), | ), 

@@ .. from faction objects
		filter( factions.filter.player-in-faction, 
			lcon( v( d.factions ), object ), , , %1 
		)
	), , , 
@@ .. see faction list as '#1' if 'staff' is passed
	switch(%1, st*, #1, %0)
)


--------------------------------------------------------------------------------
-- FACTIONS: Filter, player in faction -----------------------------------------

	filter(factions.filter.player-in-faction, <factions>, , , <player> )

0: faction dbref
1: player dbref

--

&factions.filter.player-in-faction a:p=hasattr(%0, member-%1)


--------------------------------------------------------------------------------
-- FACTIONS: Filter, object is faction -----------------------------------------

Return things that are valid faction objects. We'll probably need this. We might not.

0: faction dbref

--

&faction.filter.object-is-faction a:p=strmatch( loc( %0 ), v( d.factions ))


--------------------------------------------------------------------------------
-- FACTIONS: Get Faction Name --------------------------------------------------

&factions.name a:p=name( %0 )


================================================================================
== REPORTS =====================================================================

&prefix.reports a:p=report.


--------------------------------------------------------------------------------
-- REPORT: Player --------------------------------------------------------------

Reports:
	- Player name/dbref
	- If staff
	- Name of notes (views/staffnotes) visible to player
	- Number of notes (etc.) not visible to player
	- Items linked to player

--

0: player dbref
1: dbref to view as (optional, defaults to %0)

w: which is the target, player or staffer?
v: view-as dbref
s: which is the viewer, player or staffer?

--

&report.player a:p=
strcat(
	setq( w, if( u( .isstaff, %0 ), staffer, player )), 
	setq( v, if( isdbref( %1 ), %1, %0 )), 
	setq( x, if( u( .isstaff, %qv ), staffer, player )), 

	u( .superheader, [ucstr(%qw)]: [name( %0 )] (%0) ), 

@@ important flags & powers
	if( 
		t( setr( i, 
			setinter( 
				lflags( %0 ), 
@@ .. list 'hidden' flags if viewer is staff
				cat( 
					v( d.important-flags ), 
					if( strmatch( %qx, staffer ), v( d.important-flags.hidden ))
				)
			)
		)), 
		ansi(h, %rFlags:%b, n, lcstr( %qi ), n, %r ), 
		setq( i, )
	), 
	if( not( t( %qi )), %r ), 

	if( t( setr( i, powers( %0 ))), 
		ansi( h, %rPowers:%b, n, lcstr( %qi ), n, %r )
	), 

@@ Factions info (before removed)
	if( t( setr( f, ulocal( factions.list-factions, %0, %qx))), 
		ulocal( report.factions, %0, %qf, Factions ), 
	), 

@@ SASS info (pledges, pacts, etc.)
	if( t( setr( s, ulocal( sass.list-items, %0, %qx ))), 
		ulocal( report.sass, %0, %qs, Agreements ), 
	), 

@@ notes/views/etc
	u( report.notes, %0, %qx, Notes, header), 

@@ linkages
	ulocal( report.linkages, %0, Linkages, header ), 

	u( .superfooter )
)


--------------------------------------------------------------------------------
-- REPORT: Notes ---------------------------------------------------------------

Generic 'notes' report.

0: dbref concerning report (target)
1: viewer is 'player' or 'staffer'
2: title
3: header type, default 'header'

n: list of notes
i: various 'if' results

--

&report.notes a:p=
localize(
	strcat( 
		setq( n, u( notes.list-notes-attrs, %0, %1 )), 
		if( t( %qn ),  
			strcat( 
				u( .[if( t( %3 ), %3, header )], %2 ), %r, 
				u( .columns, 
					iter( %qn, u( notes.title, %0, %i0 ), , _ ), 
					37, _, 2 
				)
			)
		), 
		if( 
			cand(
				t( setr( i, ulocal( notes.list-notes-attrs, %0, staff ))), 
				not( strmatch( %1, staffer ))
			), 
			ansi( nh, 
				cat( 
					%rThere are, words( %qi ), 
					additional notes not visible to this, 
					lcstr( type( %0 )), bit.%r 
				)
			)
		)
	)
)
	


--------------------------------------------------------------------------------
-- REPORT: Factions ------------------------------------------------------------

Generic 'factions' report. Will try to report regardless if any exist

0: dbref concerning report (unused here, but better safe than sorry)
1: list of factions (dbrefs)
2: header

--

&report.factions a:p=
	strcat( 
		u( .header, %2 ), %r, 
		u( .columns, iter( %1, u( factions.name, %i0 ), , _ ), 37, _, 2 )
	)


--------------------------------------------------------------------------------
-- REPORT: S.A.S.S -------------------------------------------------------------

Reports the various supernatural agreements held by the player. Tries to report regardless if there's anything there

0: dbref of player (probably not needed, here just in case)
1: output from 'sass.list-items'
2: header

--

&report.sass a:p=
	strcat( 
		u( .header, %2 ), %r, 
		iter( %1, 
			strcat(
				u( .divider, first( %i0, : )), %r, 
				u( .columns, edit( rest( %i0, : ), :, %)%b ), 37, |, 2)
			), 
			||, %r 
		)
	)

--

think u(fmo/report.sass, pmatch(kelvin), u( fmo/sass.list-items, pmatch(kelvin), player ), AGREEMENTS)


--------------------------------------------------------------------------------
-- REPORT: Linkages ------------------------------------------------------------

Players, objects, and rooms can link places. It's important to know.

0: object dbref
1: title
2: header type (defaults divider)

i: temp information
r: temp report

--

&report.linkages a:p=
localize( 
	strcat( 
		setq(r, ), 

		if( t( setr( i, u( report.link.players, %0 ))), setq( r, %qr%b %qi )), 
		if( t( setr( i, u( report.link.objects, %0 ))), setq( r, %qr%b %qi )), 
		if( t( setr( i, u( report.link.rooms, %0 ))), setq( r, %qr%b %qi )), 

		if( t( %qr ), u( .[if( t( %2 ), %2, divider )], %1 )%r%qr )
	)
)

--------------------------------------------------------------------------------
-- REPORT: Rooms ---------------------------------------------------------------

0: list of rooms
1: target (player) dbref, expecting owner
2: viewer's dbref (optional)

i: 'if' condition looking for at the moment so it can be reported
x: viewer is 'staffer' or 'player' - viewer defaults to target

--

&report.rooms a:p=
localize(
	strcat( 
		setq( x, if( u( .isstaff, if( t( %2 ), %2, %1 )), staffer, player )), 
		u( .superheader, ROOMS ), %r, 

@@ for each room ...
		iter( %0, 
			strcat( 
				u( .header, ROOM #[inum(0)] ), %r, 

@@ .. basic data (name / dbref / &coord / &owner / places / linkages)
				ansi( h, %b Name:%b), name( %i0 ), %r, 
				ansi( h, %b Dbref:%b), %i0, %r, 

				u( .columns, 
					setunion( 
						if( t( setr( i, lcstr( get( %i0/coord )))), 
							ansi( h, &coord:%b, n, %qi )
						), 
						if( t( setr( i, get( %i0/owner ))), 
							ansi( h, &owner:%b, n, %qi )
							), 
						|
					), 
					37, |, 2
				), 

				if( t( setr( i, u( report.places, %i0 ))), %b %qi ), 
				ulocal( report.linkages, %i0, Linkages, none ), 

@@ .. notes/views/etc
				ulocal( report.notes, %i0, %qx, Notes, divider), 

@@ .. report on exits
				if( 
					t( setr( i, 
						filter( filter.owned-by-player, lexits( %i0 ), , , %1 )
					)), 
					[u( .divider, Exits )]%r
					[iter( %qi, u( report.room-exit, %i0, Exits ), , %r )]%r
				), 

@@ .. report on 'other exits' (exits not owned by target player)
				if( 
					t( setr( i, setdiff( lexits( %i0 ), %qi ))), 
					%b There are [words(%qi)] other exit(s) in this room. %r 
				), 

				u( .footer )
			), , %r 
		), %r, 
		u( .superfooter, [words(%0)] Rooms )
	)
)


--

think [u(fmo/report.rooms, setr(r, search(#3225 type=room)), #3225)]

think [setq(0, pmatch(gil))][u(fmo/report.rooms, setr(r, search(%q0 type=room)), %q0)]


--------------------------------------------------------------------------------
-- FUNCTION: Who Lives Here? ---------------------------------------------------

0: room
1: 'player', 'object', 'room', 'exit' (better served with lexits())

&f.search.who-lives-here a:p=search( e%1=strmatch( %0, home( ## )))

--

&f.search.it-is-here a:p=search( e%1=strmatch( %0, loc( ## )))


--------------------------------------------------------------------------------
-- FUNCTION: Link Report: Players ----------------------------------------------

&report.link.players a:p=
	if( 
		t(setr( i, u( f.search.who-lives-here, %0, player ))), 
		ansi( h, cat( words(%qi), people link here!%r ))
	)


--------------------------------------------------------------------------------
-- FUNCTION: Link Report: Objects ----------------------------------------------

&report.link.objects a:p=
	if( 
		t(setr( i, u( f.search.who-lives-here, %0, object ))), 
		ansi( h, cat( words(%qi), objects link here!%r ))
	)


--------------------------------------------------------------------------------
-- FUNCTION: Link Report: Rooms ------------------------------------------------

&report.link.rooms a:p=
	if( 
		t(setr( i, u( f.search.who-lives-here, %0, room ))), 
		ansi( h, cat( words(%qi), rooms dump here!%r ))
	)


--------------------------------------------------------------------------------
-- FUNCTION: Link Report: Exits ------------------------------------------------

&report.link.exits a:p=
		if( 
			t(setr( i, u( f.search.it-is-here, %0, exit ))), 
			ansi( h, cat( words(%qi), exits link here!%r ))
		)


--------------------------------------------------------------------------------
-- FUNCTION: Note Report: Views ------------------------------------------------

0: dbref, 1: object type

--

&report.note.views a:p=
	if( t( setr( i, u( notes.list-notes-attrs, %0, views ))), 
		cat( This %1 has, words( %qi ), view(s). %r )
	)


--------------------------------------------------------------------------------
-- FUNCTION: Note Report: Notes ------------------------------------------------

&report.note.notes a:p=
	if( t( setr( i, u( notes.list-notes-attrs, %i0, notes ))), 
		cat( This %1 has, words( %qi ), note(s). %r )
	)


--------------------------------------------------------------------------------
-- FUNCTION: Note Report: Staffnotes -------------------------------------------

&report.note.staffnotes a:p=
	if( t( setr( i, u( notes.list-notes-attrs, %i0, staffnotes ))), 
		cat( This %1 has, words( %qi ), staffnote(s). %r )
	)


--------------------------------------------------------------------------------
-- FUNCTION: Places Report -----------------------------------------------------

&report.places a:p=
	if( t( setr( i, u( .places, list, %i0 ))), 
		cat(This room has, words( %qi, | ), place(s) %r)
	)


--------------------------------------------------------------------------------
-- REPORT: Report Exits in Room owned by Player --------------------------------

0: exit dbref

i: temp information

--

&report.room-exit a:p=
localize( 
	strcat( 
@@ .. dark?
		setq( i, 
			if( hasflag( %0, dark ), 
				setunion(%qi, dark, |)
			)
		), 

@@ .. locked?
		setq( i, 
			if( lock( %0 ), 
				setunion(%qi, locked, |)
			)
		), 

		ansi( 
			xh, %b Exit , 
			xh, if( t(%qi), %b %([u( .itemize, %qi, |, %, )]%) ), 
			xh, :%b
		
		), 

		name( %0 ), %b%(, %0, %)%r, 

		ansi( xh, %b %b Leads To:%b ), name( loc( %0 )), %b%(, loc( %0 ), %)%b, 

@@ .. ignoring notes on exits until a better way presents itself

	)
)


--------------------------------------------------------------------------------
-- FILTER: Player Owns item ----------------------------------------------------

	filter(filter.owned-by-player, <exit list>, , , <owner dbref>)

0: exit dbref
1: owner dbref

--

&filter.owned-by-player a:p=strmatch(owner(%0), %1)


--------------------------------------------------------------------------------
-- REPORT: Report on (other) Exits ---------------------------------------------

These are meant to be exits owned by a player, but are not in a room that they own.

0: list of exits

--

&report.other-exits a:p=
localize( 
	iter( %0, 
@@ for each exit ...
		strcat( 
@@ .. source room
			u( .divider, OTHER ROOM: [name( home( %i0 ))] ([home( %i0 )]) ), %r, 
@@ .. exit details
			u( report.room-exit, %i0 )

		), 
		, @@
	)
)

--

think [setq(0, #3225)][setq(r, search(%q0 type=rooms))][setq(e, search(%q0 type=exits))][setq(o, iter(%qr, filter(#1642/filter.owned-by-player, lexits(%i0), , , %q0)))][u(#1642/report.other-exits, setdiff(%qe, %qo))]

think [setq(0, pmatch(meadow))][setq(r, search(%q0 type=rooms))][setq(e, search(%q0 type=exits))][setq(o, iter(%qr, filter(#1642/filter.owned-by-player, lexits(%i0), , , %q0)))][u(#1642/report.other-exits, setdiff(%qe, %qo))]


--------------------------------------------------------------------------------
-- FUNCTION: Report on Objects -------------------------------------------------

0: list of objects
1: owner dbref
2: viewed-by dbref (optional, defaults to %0)

x: viewer is 'staffer' or 'player' - viewer defaults to target
i: 'if' condition looking for at the moment so it can be reported

--

&report.objects a:p=
localize(
	strcat( 
		setq( x, if( u( .isstaff, if( t( %2 ), %2, %1 )), staffer, player )), 
		u( .superheader, OBJECTS ), %r, 

@@ for each object ...
		iter( %0, 
			strcat( 

@@ .. name/dbref
				u( .header, [name(%i0)] (%i0) ), %r, 

@@ .. home
				ansi( h, %b Home:%b ), 
				name( home( %i0 )), %b%(, home( %i0 ), %)%r, 

@@ .. exit report
				if( t(setr( i, lexits( %i0 ))), 
					cat( %b Object has, words( %i0 ), exits. )
				), 

@@ notes/views/etc
				ulocal( report.notes, %i0, %qx, Notes, divider), 

@@ linkages
				ulocal( report.linkages, %0, divider ), 

				u( .footer )
			), 
			, %r
		), 
		%r, 
		u( .superfooter, [words(%0)] Objects )
	)
)

================================================================================
== NOTES =======================================================================

Interfaces to Ebla's Notes system

--

&prefix.ebla's_notes a:p=notes.


--------------------------------------------------------------------------------
-- FUNCTION: List Notes Attributes ---------------------------------------------

'player': list '_notes' and '_views'
'staff': list '_staffnotes 
'both', concat both lists

'notes': list '_notes'
'views': list '_views'
'staffnotes': list '_staffnotes'

returns list of attributes

--

0: target dbref
1: 'player', 'staff', 'both'

--

&notes.list-notes-attrs a:p=
	case( %1, 
		views, lattr( %0/_view_* ), 
		notes, lattr( %0/_note_* ), 
		staffnotes, lattr( %0/_staffnote_* ), 
		
		player, 
		setunion( 
			u( notes.list-notes-attrs, %0, views ), 
			u( notes.list-notes-attrs, %0, notes ) 
		), 

		staff, 
		u( notes.list-notes-attrs, %0, staffnotes ), 

		staffer, 
		cat( 
			u( notes.list-notes-attrs, %0, player ), 
			u( notes.list-notes-attrs, %0, staff )
		), 

		both, 
		cat( 
			u( notes.list-notes-attrs, %0, player ), 
			u( notes.list-notes-attrs, %0, staff )
		)
	)


--------------------------------------------------------------------------------
-- FUNCTION: Get Note Text -----------------------------------------------------

0: target dbref
1: attribtue

--

&notes.text a:p=extract( get( %0/%1 ),  9, 999999, | )


--------------------------------------------------------------------------------
-- FUNCTION: Get Note Title ----------------------------------------------------

0: target dbref (_notes_<title>, et al.)
1: attribtue
returns: <view type>: <title>

--

&notes.title a:p=titlestr(edit( ansi( nr, elements( %1, 2, _ ):%b,  n, rest( rest( %1, _ ), _ )), _, %b ))



================================================================================
== S.A.S.S =====================================================================

Supernatural Agreement Support System: Pledges, pacts, blood-baths and so forth.
Unfortunately the system isn't complete just yet, so we'll be doing stuff by hand for now.

--

&prefix.s.a.s.s a:p=sass.
&d.sass.databases a:p=#2893 #4620 #8451 #10522


--------------------------------------------------------------------------------
-- S.A.S.S: List Items ---------------------------------------------------------

0: player dbref
output: <item>:<number>:<name>|<number>:<name>||<item>: ..
<item>: Pledges, Blood Baths, etc.

--

&sass.list-items a:p=
	filter( sass.filter.list-items, 
		iter( v( d.sass.databases ), 
			[before( name( %i0 ), %bDatabase)]:
			[sortby( 
				sass.sortby.items-by-num, 
				[iter( grepi( %i0, *, %0 ), 
					[rest( %i0, . )]:[first( get( %i1/%i0 ), | )], , | 
				)], 
				|, |
			)], , || 
		), ||, || 
	)

--

think u(fmo/sass.list-items, pmatch(kelvin))


--------------------------------------------------------------------------------
-- S.A.S.S: Filter List Items --------------------------------------------------

0: list of items in the 'list items' format: <type>:<item>|<item>
returns: Only <type>s with <item>s in it

--

&sass.filter.list-items a:p=t( words( rest( %0, : ), | ))


--------------------------------------------------------------------------------
-- S.A.S.S: Sort Items by Number -----------------------------------------------

	sortby( sass.sortby.items-by-num, <num>:<title>|<num>: ..., |, | )

0: <num>:<title>

--

&sass.sortby.items-by-num a:p=sub( first( %0, : ), first( %1, : ))




