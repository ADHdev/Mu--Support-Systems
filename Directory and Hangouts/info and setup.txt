/* 
================================================================================
== INFO ========================================================================

Originally set up for TinyMUX 2.4, sometime 1996.
Updated for TinyMUX 2.10, 2013.

Hangouts Command: Where all the commands are stored
Hangouts Data: Where all the hangouts are stored

Core data structure: 
	&hangout-<main dbref>: 
		<name>~<dbrefs of rooms, main first>~<map loc>~<description>

We are shifting this to:
	&loc.<attribute>.<main dbref>

	<attribute>:
		info: <name>|<type>|<rooms>|<owner>
		desc: <description of location>
		lock: <returns '1' if viewer, %0, can see this location>



================================================================================
== SETUP =======================================================================
*/

@create Directory and Hangouts <dah>=10
@set Directory and Hangouts <dah>=inherit safe

@create Locations Data=10
@set Locations Data=safe
@force me=&d.data Directory and Hangouts <dah>=[num( Locations Data )]
@tel Locations Data=Directory and Hangouts <dah>

@parent Directory and Hangouts <dah>=CODP


/* 
--------------------------------------------------------------------------------
-- Data ------------------------------------------------------------------------
*/

// .. ansi color for accents & titles
@vc Directory and Hangouts <dah>=c

// .. how long is the 'map location'?
&d.len.maploc Directory and Hangouts <dah>=4

// .. element index
// .. <name of element>:<attribute>:<index location in 'attribute'>
// .. '0' means 'entire attribute'

&d.index.elements dah=
	name:info:1 
	type:info:2 
	rooms:info:3 
	owner:info:4 
	availability:info:5 
//	description:desc:0 
	lock:lock:0 


/* 
--------------------------------------------------------------------------------
-- Support Functions -----------------------------------------------------------
*/

&.header Directory and Hangouts <dah>=header( %0 )
&.footer Directory and Hangouts <dah>=footer( %0 )
&.divider Directory and Hangouts <dah>=divider( %0 )

&.wheader Directory and Hangouts <dah>=wheader( %0 )
&.wfooter Directory and Hangouts <dah>=wfooter( %0 )
&.wdivider Directory and Hangouts <dah>=wdivider( %0 )

&.isstaff Directory and Hangouts <dah>=isstaff( %0 )
&.msg Directory and Hangouts <dah>=ansi( h, <%0>, n, %b%1 )
&.plural Directory and Hangouts <dah>=if( eq( %0, 1 ), %1, %2 )

// .. isdbref() only passes if the dbref exists. we want anything dbref-ish
&.dbreflike Directory and Hangouts <dah>=
	cand( strmatch( %0, #* ), isint( rest( %0, # )))

// .. pull dbref from the attribute; a quick place to change it if needed
&.attr2dbref Directory and Hangouts <dah>=elements( %0, 2, . )




/*
===============================================================================
== SAMPLE HELP FILE ===========================================================

:::::::::::::::::::::::::::::::.  Help for Dir  .:::::::::::::::::::::::::::::::

                              THE DIRECTORY SYSTEM
 
dir                                                                     
    List all populated locations.
dir/all                                                                 
    List all locations.
dir <name>
    List details about location <name>, which may be partially typed.
dir/who <name>                                                          
    Lists details and who's there, if they are findable.
 
"Population" depends on who you can see normally. It does not hide 'unfindable'
people or rooms. The directory system is intended to find role-play and 
facilitate the setting.
 
Some locations will have a "view lock" which will prevent some people from 
seeing that location or getting details about it. Staff always pass this lock.
 
* Planned: personal location lists, "hangouts"
 
Builder commands listed in: +help Dir 2
 
See Also: +help Travel
 
Category: Who & Where

::::::::::::::.  Tue Feb 24 17:42:57 2015 Eastern (1 minute 15 seconds ago)  .::


::::::::::::::::::::::::::::::.  Help for Dir 2  .::::::::::::::::::::::::::::::

                          DIRECTORY: BUILDER COMMANDS
 
The key concept here is that one location may be made up of many rooms. One room 
must be the primary.
 
After each command description is a shortcut for when you're already in the room 
you want to add.
 
dir/create <room dbref>=<location name>
    Create a new location based on the a room.
    Shortcut: dir/create %L=New Location Name
 
dir/room <location name>=<room dbref>
    Add a new room to the list of rooms in that location.
    Shortcut: dir/room New Location Name=%L
 
dir/set <location name>/<element>=<value>
    Set <element>. Elements are:
    * Name (already set, but can be changed here)
    * Type
    * Availability (in game-terms, the cash needed to go here)
    * Owner (name of the PC or NPC owner; will be changing sometime)
    * Lock (view lock, uses %0 as the viewer)
    Shortcut: There is no shortcut for this.
 
&short-desc <main room dbref>=<a description of the location>           
    Give people an idea about what that location is for.                    
 
The system also pulls the map location of the main room from the main room. It 
will complain if it hasn't been set.

::::::::::::::.  Tue Feb 24 17:41:23 2015 Eastern (4 minutes 9 seconds ago)  .::
