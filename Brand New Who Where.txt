/*
current systems:
	who
	where
	finger
	staff
	duty
	name
	idle sweep

planned:
	hangouts
	directory

A great number of Mush commands are based on a mix of two vertices: Player 
objects and room objects. These are epitomized by the commands 'who' (who is 
connected, and some light information about them) and 'where' (which rooms are 
populated with player objects, and some information about them).

The goal of the "Brand New Who-Where" system is to be game setup independent (as 
long the game is running TinyMUX), and to be easily extendable by writing 
further systems on top of this one, or asking this system for appropriate player 
object or room information.



================================================================================
== SETUP =======================================================================
*/

@create Brand New Who-Where <bnww>
@fo me=&d.bnww me=[search( name=Brand New Who-Where <bnww> )]

@set [v( d.bnww )]=INHERIT SAFE VISUAL

@aconnect [v( d.bnww )]=
	@dolist lattr( %!/aconnect.* )={ @trigger %!/##=%# };

@adisconnect [v( d.bnww )]=
	@dolist lattr( %!/adisconnect.* )={ @trigger %!/##=%# };


// Code Object Data Parent setup; optional

@parent [v( d.bnww )]=[search( name=Code Object Data Parent <codp> )]
&prefix.finger_fields [v( d.bnww )]=finger.
&prefix.preferences [v( d.bnww )]=pref.



/*
================================================================================
== DATA AND PREFERENCES ========================================================

for 'pref.*' attributes, '1' for 'true', '0' for 'false'.

*/

@fo me=&d.mushcron [v( d.bnww )]=[search( name=CRON - Myrddin's mushcron )]


// make the idlers stand out or are separated from the main who listing
&pref.segregate.idle [v( d.bnww )]=1

// how idle is idle? 1 hour/2 hours
&pref.secs.idle [v( d.bnww )]=3600
&pref.secs.superidle [v( d.bnww )]=7200


/*
================================================================================
== DOT-FUNCTIONS ===============================================================
*/

&.msg [v( d.bnww )]=ansi( h, <%0>, n, %b%1 )
&.plural [v( d.bnww )]=strcat( %0, %b, if( eq( %0, 1 ), %1, %2 ))
&.lwho [v( d.bnww )]=objeval( %0, lwho())
&.isstaff [v( d.bnww )]=isstaff( %0 )
&.isapproved [v( d.bnww )]=isapproved( %0 )

// remove elements from a delimited list of elements without upsetting the order
&.remove_elements [v( d.bnww )]=
	ldelete( %0, iter( %1, matchall( %0, %i0, %2 ), %2 ), %2, %2 )



/*
================================================================================
== FILTERS =====================================================================
*/

&fil.staff [v( d.bnww )]=u( .isstaff, %0 )
&fil.dark [v( d.bnww )]=hasflag( %0, dark )
&fil.findable [v( d.bnww )]=findable( %0, %1 )
&fil.name-match [v( d.bnww )]=strmatch( name( %0 ), %1* )
&fil.duty [v( d.bnww )]=not( hasflag( %0, transparent ))
&fil.off-duty [v( d.bnww )]=hasflag( %0, transparent )
&fil.in-room [v( d.bnww )]=strmatch( room( %0 ), %1 )



/*
================================================================================
== SORTBYS =====================================================================
*/

&sortby.connected [v( d.bnww )]=comp( conn( %0 ), conn( %1 ))

// ... this isn't really a sortby, it's a function that sorts?
&sortby.connect-time [v( d.bnww )]=
	iter( sort( iter( %0, [conn(%i0)]:%i0 ), n ), rest( %i0, : ))



/* 
================================================================================
== CHECK FOR GENERAL CONDITIONS ================================================
*/

// idle checks 
&f.check.idle [v( d.bnww )]=gte( idle( %0 ), v( pref.secs.idle ))
&f.check.superidle [v( d.bnww )]=gte( idle( %0 ), v( pref.secs.superidle ))

// flag checks
&f.check.on-duty [v( d.bnww )]=not( hasflag( %0, TRANSPARENT ))
&f.check.wikisprite [v( d.bnww )]=@@( <is a wikisprite> )
&f.check.storyteller [v( d.bnww )]=@@( <is a storyteller> )



/*
================================================================================
== FLAGS =======================================================================

Sometimes we want to display a single character describing duty status, desire 
for RP, or other similar elements in a condensed format.

Staff: Duty & Dark
Player: Wants RP & Responsibilities


--------------------------------------------------------------------------------
-- Flags: Who Flags ------------------------------------------------------------

These flags are mainly for '+who', but can be used by any part of the system.

*/

&f.get-who-flags [v( d.bnww )]=
	case( 1, 
		isstaff( %0 ), 
		strcat( 
			u( format.flags.staff.duty, %0 ), 
			u( format.flags.dark, %0 )
		), 
		strcat( 
			u( format.flags.wantrp, %0 ), 
			u( format.flags.wikisprite, %0 ), 
			u( format.flags.storyteller, %0 )
		)
	)


/*
--------------------------------------------------------------------------------
-- Flags: Formatting -----------------------------------------------------------
*/

&format.flags.staff.duty [v( d.bnww )]=
	case( 1, 
		u( f.check.idle, %0 ), ansi( xh, ! ), 
		u( f.check.on-duty, %0 ), ansi( h, * ), 
		ansi( xh, x )
	)

&format.flags.dark [v( d.bnww )]=
	if( hasflag( %0, DARK ), ansi( xh, D ))

&format.flags.wantrp [v( d.bnww )]=if( u( f.check.wantrp, %0 ), ~ )

&format.flags.wikisprite [v( d.bnww )]=
	if( u( f.check.wikisprite, %0 ), 
		if( u( f.check.on-duty, %0 ), ansi( h, ? ), ansi( xh, ? ))
	)

&format.flags.storyteller [v( d.bnww )]=
	if( u( f.check.storyteller, %0 ), 
		if( u( f.check.on-duty, %0 ), ansi( h, + ), ansi( xh, + ))
	)



/*
================================================================================
== SYSTEM: WHO =================================================================

	who[ <partial name>]

w: who, as can be seen by the enactor (optionally filtered by name input)
u: unique logins, regardless of enactor
f: footer

*/

&c.who [v( d.bnww )]=$^\+?who( .*)?$:
	@pemit %#=strcat( 
		setq( w, setunion( u( .lwho, %# ), )), 
		setq( u, setunion( iter( lwho(), get( %i0/lastip )), )), 
		setq( f, 
			cat( 
				words( %qw ), Connected, /, 
				words( %qu ), Unique, /, 
				connrecord(), Record 
			)
		), 
		if( t( trim( %1 )), 
			setq( w, filter( fil.name-match, %qw, , , trim( %1 )))
		), 
		u( display.who.complete, %#, Who - [poll()], %qf, %qw )
	)

@set [v( d.bnww )]/c.who = regexp


/* 
--------------------------------------------------------------------------------
-- Who: Display & Format -------------------------------------------------------

0: enactor dbref (%#)
1: header text
2: footer text
3: dbrefs to list

i: 'super-idle' people (ignore if '&pref.segregate.idle' is 'false')

*/

&display.who.complete [v( d.bnww )]=
	strcat( 
		setq( i, 
			if( v( pref.segregate.idle ), filter( f.check.superidle, %3 ))
		), 
		header( %1 ), %r, 
		iter( u( sortby.connect-time, setdiff( %3, %qi )), 
			u( display.who.one-line, %i0, %0 ), , %r 
		), %r, 
		if( t( %qi ), 
			strcat( 
				divider( idle players ), %r, 
				iter( %qi, u( display.who.one-line, %i0, %0 ), , %r ), 
				%r, 
			)
		), 
		divider( 
			strcat( 
				~ Seeking RP%, 
				* Staff %(on duty%)%, 
				x Staff %(off duty%), 
				if( isstaff( %0 ),%, D Dark )
			)
		), %r, 
		footer( %2 )
	)


// (do not gray out idlers if '&pref.segregate.idle' is '0')
&display.who.one-line [v( d.bnww )]=
	localize( strcat( 
		setq( i, if( v( pref.segregate.idle ), filter( f.check.idle, %0 ))), 
		setq( s, 
			if( v( pref.segregate.idle ), filter( f.check.superidle, %0 ))
		), 
		setq( a, if( t( %qi ), xh, n )), 
		ljust( u( f.get-who-flags, %i0 ), 2 ), %b, 
		ljust( ansi( %qa, moniker( %0 )), 14 ), %b, 
		ljust( ansi( %qa, get( %0/alias )), 7 ), %b, 
		rjust( 
			if( cor( not( %qs ), isstaff( %1 )), 
				ansi( %qa, singletime( idle( %0 ))), 
				ansi( xh, -- )
			), 
			3 
		), %b%b, 
		rjust( 
			if( cor( not( %qs ), isstaff( %1 )), 
				ansi( %qa, singletime( conn( %0 ))), 
				ansi( xh, -- )
			), 
			3 
		), %b%b, 
		ljust( 
			ansi( %qa, 
				if( findable( %1, %0 ), 
					name( where( %0 )), 
					* Unfindable * 
				)
			), 
			39 
		), 
		%xn 
	))



/*
================================================================================
== SYSTEM: WHERE ===============================================================
*/

&c.where [v( d.bnww )]=$^\+?where$:@pemit %#=
	strcat( 
		wheader( Where ), %r, 
		iter( setr( r, u( f.where.rooms )), 
			strcat( 
				setq( c, filter( fil.in-room, lwho(), , , %i0 )), 
				setq( f, filter( fil.findable, %qc, , , %# )), 
				setq( u, setdiff( %qc, %qf )), 
				setq( i, 
					sortby( sortby.connected, filter( f.check.idle, %qf ))
				), 
				setq( a, sortby( sortby.connected, setdiff( %qf, %qi ))), 
				wdivider( 
					strcat( 
						name( %i0 ), 
						if( t( setr( z, get( %i0/coord ))), 
							%b%[%qz%] 
						), %b, 
						%(pop:, words( %qc ), %)
					)
				), %r, 
				case( 1, 
					cand( t( %qf ), t( %qu )), 
					strcat( 
						u( format.where.findable, %qa %qi ), %,, 
						u( format.where.unfindable, %qu )
					), 
					t( %qf ), 
					u( format.where.findable, %qa %qi ), 
					t( %qu ), 
					u( format.where.unfindable, %qu ), 
					<< error: nobody is here so why am I listing this? >> -- 
					%qc -- %qf -- %qu 
				)
			), , %r 
		), %r, 
		setq( u, setdiff( lwho(), filter( fil.findable, lwho(), , , %# ))), 
		setq( i, sortby( sortby.connected, filter( f.check.idle, %qu ))), 
		setq( a, sortby( sortby.connected, setdiff( %qu, %qi ))), 
		if( t( %qu ), 
			strcat( 
				wdivider( Unfindable ), %r, 
				u( format.where.findable, %qa %qi ), %r 
			)
		), 
		wfooter( [words( %qr )] rooms occupied )
	)

@set [v( d.bnww )]/C.WHERE = regexp


/*
--------------------------------------------------------------------------------
-- Where: Functions & Formatting -----------------------------------------------

&f.where.rooms [v( d.bnww )]=setunion( iter( lwho(), room( %i0 )), )

&format.where.findable [v( d.bnww )]=
	iter( %0, 
		if( not( u( f.check.idle, %i0 )), 
			moniker( %i0 ), 
			ansi( xh, name( %i0 ))
		), , %,%b 
	)

&format.where.unfindable [v( d.bnww )]=ansi( xh, [words( %0 )] unfindable )



/* 
================================================================================
== SYSTEM: STAFF ===============================================================

A tiny 'who' for staff. 

Ignores the 'dark' flag for now, because I have a mild moral objection to games 
where staff spend their lives dark. I understand sometimes you can't get 
anything done otherwise, but I will need to take some time later to add a 
preference for this behavior.


w: on duty
o: off duty
d: dark

*/

&C.STAFF [v( d.bnww )]=$^\+?staff$: @pemit %#=
	strcat( 
		setq( w, filter( fil.staff, lwho())), 
		setq( d, sortby( sortby.connected, filter( fil.dark, %qw ))), 
		setq( w, setdiff( %qw, %qd )), 
		setq( o, filter( fil.off-duty, %qw, %qd )), 
		setq( w, sortby( sortby.connected, setdiff( %qw, %qo ))), 
		wheader( [mudname()] Staff ), %r, 
		iter( %qw, 
			u( display.staff.one-line, %i0, singletime( idle( %i0 )), %# ), 
			, %r 
		), %r, 
		if( words( %qo ), 
			strcat( 
				wdivider( Off-Duty ), %r, 
				iter( %qo, 
					u( display.staff.one-line, 
						%i0, singletime( idle( %i0 )), %# 
					), , %r 
				), %r 
			), 
		), 
		if( words( %qd ), 
			strcat( 
				wdivider( Dark Staff -- Super-Off-Duty ), %r, 
				iter( %qd, 
					ansi( xh, u( display.staff.one-line, %i0, , %# )), 
					, %r 
				), %r 
			)
		), 
		wfooter()
	)

@set [v( d.bnww )]/C.STAFF=regexp


/*
--------------------------------------------------------------------------------
-- Staff: Display One Line -----------------------------------------------------
*/

&DISPLAY.STAFF.ONE-LINE [v( d.bnww )]=
	strcat( 
		ljust( u( f.get-who-flags, %0 ), 3 ), 
		ljust( name( %0 ), 20 ), %b, 
		ljust( %1 , 4 ), %b, 
		ljust( get( %i0/position ), sub( width( %2 ), 47 ))
	)



/*
================================================================================
== SYSTEM: DUTY ================================================================

Go on or off duty. Can be used by players but is meaningless unless another 
system uses it, such as 'wikisprite' or 'storyteller'.

*/

&C.STAFF.DUTY [v( d.bnww )]=$^\+?duty$:
	think setr( d, hasflag( %#, transparent )); 
	@break %qd={ 
		@set %#=!transparent; 
		@pemit %#=u( .msg, duty, You have gone ON duty. ) 
	}; 
	@set %#=transparent; 
	@pemit %#=u( .msg, duty, You have gone OFF duty. )

@set [v( d.bnww )]/C.STAFF.DUTY=regexp



/*
================================================================================
== SYSTEM: NAME ================================================================

Find all matches of 'name' or 'name*' or '*name*' against @name player objects.
Includes @alias.

*/

&C.NAME [v( d.bnww )]=$^\+?name( .+)?$:
	@assert strlen( %1 )={ 
		@pemit %#=u( .msg, name, Please supply a search prefix ) 
	}; 
	think strcat( 
		n:, setr( n, squish( edit( secure( trim( %1 )), *, ))), %r, 
		r:, setr( r, 
			search( eplayer=
				cor( 
					strmatch( name( ## ), %qn* ), 
					strmatch( get( ##/alias ), %qn* )
				)
			)
		), %r, 
		w:, setr( w, words( %qr )), %r, 
	); 
	@assert t( %qw )={ 
		@pemit %#=u( .msg, name, No names match ) 
	}; 
	@assert lte( %qw, 20 )={ 
		@pemit %#=u( .msg, name, That filter is too vague%; %qw names match ) 
	}; 
	@pemit %#=
		strcat( 
			header( Names matching '%qn' ), %r, 
			ansi( xh, u( format.name.header, Name, Alias, Location, Active )), 
			%r, 
			divider(), %r, 
			iter( %qr, u( display.name.line, %i0 ), , %r ), %r, 
			footer( %qw names )
		);

@set [v( d.bnww )]/C.NAME = regexp


/*
--------------------------------------------------------------------------------
-- Name: Displays & Formating --------------------------------------------------
*/

&format.name.header [v( d.bnww )]=
	trim( 
		strtrunc( 
			cat( 
				ljust( %0, 20 ), 
				ljust( %1, 10 ), 
				ljust( %2, 35 ), 
				%3 
			), 
			width( %# )
		), 
		r 
	)

&format.name.one-line [v( d.bnww )]=
	trim( 
		strtrunc( 
			cat( 
				ljust( %0, 20 ), 
				ljust( %1, 10 ), 
				ljust( %2, 35 ), 
				%3 
			), 
			width( %# )
		), 
		r 
	)

// I know both of those are the same

&display.name.line [v( d.bnww )]=
	u( format.name.one-line, 
		moniker( %0 ), 
		default( %0/alias, ansi( xh, %(none%) )), 
		if( 
			cor( hasflag( %0, unfindable ), hasflag( loc( %0 ), unfindable )), 
			Unfindable, name( loc( %0 ))
		), 
		if( andflags( %0, c!D ), 
			%xhidle [singletime( idle( %0 ))], 
			singletime( sub( secs( ), convtime( get( %0/last )))) ago 
		)
	)



/*
================================================================================
== SYSTEM: WANT RP =============================================================

Also called 'rp' on some games.

*/

&adisconnect.wantrp [v( d.bnww )]=@set %0=.prefs.wantrp:;

&c.wantrp/on [v( d.bnww )]=$^\+?wantrp/on$:
	@assert u( .isapproved, %# )={ 
		@pemit %#=u( .msg, wantrp/on, Must be approved ) 
	}; 
	@assert not( hasattr( %#, .prefs.wantrp ))={ 
		@pemit %#=u( .msg, wantrp/on, Already on ) 
	}; 
	@set %#=.prefs.wantrp:yes; 
	@pemit %#=u( .msg, wantrp/on, 
		strcat( 
			You are now set to seeking RP, 
			if( not( match( cwho( v( d.channel.rp )), %# )), 
				%; to talk to other people about RP and current plots%, 
				join our '[v( d.channel.rp )]' channel 
			)
		)
	);

@set [v( d.bnww )]/c.wantrp/on = regexp



&c.wantrp/off [v( d.bnww )]=$^\+?wantrp/off$:
	@assert u( .isapproved, %# )={ 
		@pemit %#=u( .msg, wantrp/on, Must be approved ) 
	}; 
	@assert hasattr( %#, .prefs.wantrp )={ 
		@pemit %#=u( .msg, wantrp/on, Already off ) 
	}; 
	@set %#=.prefs.wantrp:; 
	@pemit %#=u( .msg, wantrp/off, 
		You are no longer seeking RP and will not show up on the various 
		lists for it 
	);

@set [v( d.bnww )]/c.wantrp/off = regexp



&c.wantrp [v( d.bnww )]=$^\+?wantrp( .*)?$:@pemit %#=
	strcat( 
		setq( w, setunion( filter( filter.wantrp, u( .lwho, %# )), )), 
		setq( c, v( d.channel.rp )), 
		setq( a, if( setr( a, comalias( %#, %qc )), %qa, %qc )), 
		setq( f, [u( .plural, words( setinter( cwho( %qc ), u( .lwho, %# ))), person, people )] on the '%qa' channel ), 
		if( t( trim( %1 )), 
			setq( w, filter( fil.name-match, %qw, , , trim( %1 )))
		), 
		u( display.who.complete, %#, Who Wants RP, %qf, %qw )
	)

@set [v( d.bnww )]/C.WANTRP = regexp

/*
--------------------------------------------------------------------------------
-- WantRP: Data & Filters & Functions ------------------------------------------
*/

&d.channel.rp [v( d.bnww )]=RP Chat

@if not( cwho( get( v( d.bnww )/d.channel.rp )))=
	think ansi( hr, There is no '[get( v( d.bnww )/d.channel.rp )]' Channel )

&filter.wantrp [v( d.bnww )]=u( f.check.wantrp, %0 )

&f.check.wantrp [v( d.bnww )]=
	cand( hasattr( %0, .prefs.wantrp ), isapproved( %0 ))



/* 
================================================================================
== SYSTEM: IDLE SWEEP ==========================================================

Sweep idle players into a room. Be nice about it. Allow game administration to 
set criteria about when not to move them, by room, zone, or code.

Time to idle before swept: &f.check.superidle. This is performed regardless of &pref.segregate.idle.

Set up Mushcron:
*/

@fo me=
	&jobs_1minute [u( [v( d.bnww )]/d.mushcron )]=
		setunion( 
			get( u( [v( d.bnww )]/d.mushcron )/jobs_1minute ), 
			[v( d.bnww )]/trig.idle-sweep.players 
		)

/*
--------------------------------------------------------------------------------
-- Idle Sweep: Trigger (run once per minute) -----------------------------------
*/

&TRIG.IDLE-SWEEP.PLAYERS [v( d.bnww )]=
	think strcat( 
		super-idle:, %b, 
		setr( i, filter( f.check.superidle, u( .lwho, %@ ))), %r, 

		excuse staff:, %b, 
		setr( i, setdiff( %qi, filter( fil.staff, %qi ))), %r, 

		people to leave alone:, %b, 
		setr( h, 
			iter( %qi, 
				if( 
					cor( 
						t( setinter( 
							v( pref.idle-exempt.rooms ), 
							loc( %i0 )
						)), 
						t( setinter( 
							v( pref.idle-exempt.zones ), 
							zone( loc( %i0 ))
						)), 
						t( u( pref.idle-exempt.code, %i0 )), 
						strmatch( 
							loc( %i0 ), 
							v( pref.idle_room )
						)
					), 
					%i0 
				)
			)
		), %r, 

		people to move:, %b, 
		setr( i, setdiff( %qi, %qh )), %r, 
	); 

	@dolist %qi={ 
// .. it would be cool if we sent this message only once per room ..
		@oemit ##=msg( zzzz, Moving a sleepy [moniker( ## )]. ); 
		@tel/quiet ##=v( pref.idle_room ); 
		@pemit ##=msg( zzzz, Moved you to a safe location till you wake up... ) 
	};


/*
--------------------------------------------------------------------------------
-- Idle Sweep: Preferences -----------------------------------------------------
*/

&pref.idle-exempt.rooms [v( d.bnww )]=@@( possibly your ooc room )

&pref.idle-exempt.zones [v( d.bnww )]=@@( ooc room or zones )

&pref.idle-exempt.code [v( d.bnww )]=strmatch( loc( %0 ), home( %0 ))

@fo me=&pref.idle_room [v( d.bnww )]=
	[search( eroom=strmatch( name( ## ), Quiet Room ))]



/*
================================================================================
== CLEAN UP ====================================================================
*/

@fo me=@tel Brand New Who-Where <bnww>=[config( master_room )]
