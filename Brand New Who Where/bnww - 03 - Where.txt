/*
################################################################################
## SYSTEM: WHERE ###############################################################


--------------------------------------------------------------------------------
-- Where: Preferences ----------------------------------------------------------
*/

// show 'unfindable' count per room? (1 = yes, 0 = no)

&pref.where.count-unfindable [v( d.bnww )]=0


/* 
--------------------------------------------------------------------------------
-- Where: Command --------------------------------------------------------------

r: rooms with people in them (dbref), unfiltered
w: lwho() - as seen by enactor

*/

&c.where [v( d.bnww )]=$^\+?where$:@pemit %#=
	strcat( 
		setq( r, u( f.where.rooms, %# )), 
		setq( w, setunion( objeval( %#, lwho()), )), 
		u( display.where.complete, %#, %qr, %qw )
	)

@set [v( d.bnww )]/C.WHERE = regexp


/*
--------------------------------------------------------------------------------
-- Where: Display Some Rooms & Some People In Them -----------------------------

This allows us to pass a shortened list of 'rooms to list' or even 'who to list'

0: enactor (%#)
1: rooms to list (%qr)
2: who to list - probably connected (%qw)

c: census of room, unfiltered
f: findable people to %#
u: unfindable people to %# (difference of %qc and %qf)

i: findable people who are 'idle'
a: findable people who are 'active' (!idle)

*/

&display.where.complete [ v( d.bnww )]=
	strcat( 
		wheader( Where ), %r, 
		iter( %1, 
			strcat( 
				setq( c, filter( fil.in-room, %2, , , %i0 )), 
				setq( f, filter( fil.findable, %qc, , , %0 )), 
				if( t( v( pref.where.count-unfindable )), 
					setq( u, setdiff( %qc, %qf )), 
					setq( u, )
				), 
				setq( i, 
					sortby( sortby.connected, filter( f.check.idle, %qf ))
				), 
				setq( a, sortby( sortby.connected, setdiff( %qf, %qi ))), 
				wdivider( 
					strcat( 
						name( %i0 ), 
						if( t( setr( z, get( %i0/coord ))), 
							%b%[%qz%] 
						), %b, 
						%(pop:, add( words( %qf ), words( %qu )), %)
					)
				), %r, 
				case( 1, 
					cand( t( %qf ), t( %qu )), 
					strcat( 
						u( format.where.findable, %qa %qi ), %,%b, 
						u( format.where.unfindable, %qu )
					), 
					t( %qf ), 
					u( format.where.findable, %qa %qi ), 
					t( %qu ), 
					u( format.where.unfindable, %qu ), 
					<< error: nobody is here so why am I listing this? >> 
					[if( isstaff( %0 ), -- c: %qc -- f: %qf -- u: %qu )]
				)
			), , %r 
		), %r, 
		setq( u, setdiff( %2, filter( fil.findable, %2, , , %0 ))), 
		setq( i, sortby( sortby.connected, filter( f.check.idle, %qu ))), 
		setq( a, sortby( sortby.connected, setdiff( %qu, %qi ))), 
		if( t( %qu ), 
			strcat( 
				wdivider( Unfindable ), %r, 
				u( format.where.findable, %qa %qi ), %r 
			)
		), 
		wfooter( [words( %1 )] rooms occupied )
	)



/*
--------------------------------------------------------------------------------
-- Where: Functions & Formatting -----------------------------------------------

f.where.rooms: remember to ignore what the target can't see.

*/

// &f.where.rooms [v( d.bnww )]=setunion( iter( lwho(), room( %i0 )), )

&f.where.rooms [v( d.bnww )]=
	filter( fil.room-population, 
		setunion( iter( objeval( %0, lwho()), room( %i0 )), ), 
		, , %0 
	)

// this is ugly, so ugly, but is used to filter out rooms 
// when 'pref.where.count-unfindable' is set to 0
&fil.room-population [v( d.bnww )]=
	localize( strcat( 
		setq( c, filter( fil.in-room, lwho(), , , %0 )), 
		setq( f, filter( fil.findable, %qc, , , %1 )), 
		if( t( v( pref.where.count-unfindable )), 
			setq( u, setdiff( %qc, %qf )), 
			setq( u, )
		), 
		t( %qf %qu )
	))

&format.where.findable [v( d.bnww )]=
	iter( %0, 
		if( cor( not( u( f.check.idle, %i0 )), v( pref.segregate.idle )), 
			moniker( %i0 ), 
			ansi( xh, name( %i0 ))
		), , %,%b 
	)

&format.where.unfindable [v( d.bnww )]=ansi( xh, [words( %0 )] unfindable )
